{\rtf1\ansi\deff0
\b 删除文件接口规范\b0\par
\par
\b 一、接口概述\b0\par
用户删除其已上传文件，同时清理知识库分块与磁盘文件。操作具备幂等性：文件不存在亦返回成功。\par
\par
\b 二、URL 与方法\b0\par
- Method: DELETE\par
- URL: /files/{fileId}\par
\par
\b 三、认证\b0\par
- Header: Authorization: Bearer <JWT_TOKEN>\par
\par
\b 四、路径参数\b0\par
- fileId：要删除的文件 ID（字符串 UUID）\par
\par
\b 五、请求体\b0\par
- 无\par
\par
\b 六、响应示例\b0\par
1) 成功（HTTP 200）\par
{\pard\li720 \{ "success": true, "message": "删除成功", "data": null, "code": 200 \}\par}
\par
2) 权限不足（HTTP 403）\par
{\pard\li720 \{ "success": false, "message": "无权删除他人文件", "code": 403 \}\par}
\par
3) 服务器错误（HTTP 500）\par
{\pard\li720 \{ "success": false, "message": "删除文件失败", "code": 500 \}\par}
\par
\b 七、后端处理流程（实际执行步骤）\b0\par
1. 后端从登录态中解析当前用户 userId（JWT）。\par
2. 查询 uploaded_files 表：\par
{\pard\li720 - 若记录不存在：直接返回成功（幂等）。\par}
{\pard\li720 - 若存在但 user_id != userId：返回 403（无权删除他人文件）。\par}
3. 级联清理：\par
{\pard\li720 - 删除该文件在知识库中的分块与向量：document_chunks 按 fileId + userId 删除。\par}
{\pard\li720 - 删除磁盘文件：Files.deleteIfExists(filePath)（失败将被忽略，不影响数据库删除与响应）。\par}
{\pard\li720 - 删除 uploaded_files 表中该文件记录。\par}
4. 返回统一响应：ApiResponse.success("删除成功", null)，HTTP 200。\par
\par
\b 八、行为约定与备注\b0\par
- 幂等性：重复删除同一 fileId 均返回成功。\par
- 事务性：数据库级联删除在一个事务中完成；磁盘删除失败不影响事务与响应结果。\par
- 鉴权：仅文件所有者可删除。\par
\par
\b 九、前端调用示例\b0\par
1) cURL\par
{\pard\li720 curl -X DELETE "http://<host>:<port>/files/<fileId>" -H "Authorization: Bearer <JWT_TOKEN>"\par}
\par
2) TypeScript（fetch）\par
{\pard\li720 async function deleteFile(fileId, token) {\par}
{\pard\li1080 const res = await fetch(`/files/${fileId}`, { method: 'DELETE', headers: { Authorization: `Bearer ${token}` } });\par}
{\pard\li1080 const json = await res.json();\par}
{\pard\li1080 if (!res.ok || !json.success) throw new Error(json.message || `删除失败(${res.status})`);\par}
{\pard\li1080 return json;\par}
{\pard\li720 }\par}
\par
\b 十、错误码说明\b0\par
- 200：删除成功\par
- 403：无权删除他人文件\par
- 500：删除文件失败（服务器内部错误）\par
} 